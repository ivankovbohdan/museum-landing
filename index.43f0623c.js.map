{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var initializeSettings = function initializeSettings() {\n        if (window.innerWidth >= 1280) {\n            var buttons = document.querySelector(\".slider__buttons\");\n            if (buttons) buttons.remove();\n            slider.removeAttribute(\"style\");\n            sliderList.removeAttribute(\"style\");\n        } else if (window.innerWidth >= 768 && window.innerWidth <= 1280) {\n            settings.itemWidth = 340;\n            settings.frameSize = 2;\n            settings.step = 2;\n            settings.gap = 20;\n            settings.previewWidth = 14;\n            slider.style.minWidth = \"\".concat(settings.itemWidth * settings.frameSize + settings.gap + settings.previewWidth, \"px\");\n            var buttons1 = updateButtons();\n            handleButtonsClick(buttons1);\n            slider.addEventListener(\"touchstart\", touchStart);\n            slider.addEventListener(\"touchmove\", touchMove);\n            slider.addEventListener(\"touchend\", touchEnd);\n            sliderList.style.transform = \"translateX(0)\";\n        } else {\n            settings.itemWidth = 280;\n            settings.frameSize = 1;\n            settings.step = 1;\n            settings.gap = 16;\n            settings.previewWidth = 4;\n            slider.style.minWidth = \"\".concat(settings.itemWidth * settings.frameSize + settings.gap + settings.previewWidth, \"px\");\n            var buttons2 = updateButtons();\n            handleButtonsClick(buttons2);\n            slider.addEventListener(\"touchstart\", touchStart);\n            slider.addEventListener(\"touchmove\", touchMove);\n            slider.addEventListener(\"touchend\", touchEnd);\n            sliderList.style.transform = \"translateX(0)\";\n        }\n    };\n    var updateButtons = function updateButtons() {\n        var buttons\\u0421ontainer = document.createElement(\"ul\");\n        buttons\\u0421ontainer.classList.add(\"slider__buttons\");\n        var existingButtons = document.querySelector(\".slider__buttons\");\n        if (existingButtons) existingButtons.remove();\n        slider.append(buttons\\u0421ontainer);\n        var totalSlides = slides.length;\n        var frameSize = settings.frameSize;\n        var step = settings.step;\n        var numButtons = Math.ceil((totalSlides - frameSize) / step) + 1;\n        for(var i = 0; i < numButtons; i++){\n            var item = document.createElement(\"li\");\n            var button = document.createElement(\"button\");\n            item.classList.add(\"slider__buttons-item\");\n            button.classList.add(\"slider__buttons-btn\");\n            item.appendChild(button);\n            buttons\\u0421ontainer.appendChild(item);\n        }\n        return buttons\\u0421ontainer.querySelectorAll(\".slider__buttons-btn\");\n    };\n    var handleButtonsClick = function handleButtonsClick(currentButtons) {\n        currentButtons.forEach(function(button, index) {\n            button.addEventListener(\"click\", function() {\n                if (index > currentIndex) currentIndex = index * settings.step;\n                else currentIndex = index * settings.step;\n                currentButtons.forEach(function(btn) {\n                    return btn.classList.remove(\"slider__buttons-btn--active\");\n                });\n                button.classList.add(\"slider__buttons-btn--active\");\n                var sliderWidth = slider.offsetWidth;\n                var totalWidth = slides.length * (settings.itemWidth + settings.gap) - settings.gap;\n                var offset;\n                if (currentIndex === 0) offset = 0;\n                else if (currentIndex >= slides.length - settings.frameSize) offset = totalWidth - sliderWidth;\n                else offset = currentIndex * (settings.itemWidth + settings.gap) - (sliderWidth - settings.itemWidth) / 2 + settings.previewWidth / 2;\n                sliderList.style.transform = \"translateX(-\".concat(offset, \"px)\");\n            });\n        });\n        currentButtons[0].classList.add(\"slider__buttons-btn--active\");\n    };\n    var touchStart = function touchStart(event) {\n        isDragging = true;\n        startPos = event.touches[0].clientX;\n        prevTranslate = currentTranslate;\n    };\n    var touchMove = function touchMove(event) {\n        if (isDragging) {\n            var currentPosition = event.touches[0].clientX;\n            currentTranslate = prevTranslate + currentPosition - startPos;\n            sliderList.style.transform = \"translateX(\".concat(currentTranslate, \"px)\");\n        }\n    };\n    var touchEnd = function touchEnd(e) {\n        isDragging = false;\n        var movedBy = startPos - e.changedTouches[0].clientX;\n        if (Math.abs(movedBy) > 50) {\n            if (movedBy > 50 && currentIndex < slides.length - settings.frameSize) currentIndex += settings.step;\n            else if (movedBy < -50 && currentIndex > 0) currentIndex -= settings.step;\n        }\n        // Використання вашої логіки перемикання\n        var buttons = document.querySelectorAll(\".slider__buttons-btn\");\n        buttons[currentIndex / settings.step].click();\n    };\n    var slider = document.querySelector(\".slider\");\n    var sliderList = document.querySelector(\".slider__list\");\n    var slides = document.querySelectorAll(\".slider__item\");\n    // Touch\n    var isDragging = false;\n    var startPos = 0;\n    var currentTranslate = 0;\n    var prevTranslate = 0;\n    var currentIndex = 0;\n    var settings = {\n        itemWidth: 280,\n        frameSize: 1,\n        step: 1,\n        gap: 16,\n        previewWidth: 4\n    };\n    initializeSettings();\n    window.addEventListener(\"resize\", initializeSettings);\n});\n\n//# sourceMappingURL=index.43f0623c.js.map\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const slider = document.querySelector('.slider');\n  const sliderList = document.querySelector('.slider__list');\n  const slides = document.querySelectorAll('.slider__item');\n\n  // Touch\n  let isDragging = false;\n  let startPos = 0;\n  let currentTranslate = 0;\n  let prevTranslate = 0;\n\n  let currentIndex = 0;\n\n  const settings = {\n    itemWidth: 280,\n    frameSize: 1,\n    step: 1,\n    gap: 16,\n    previewWidth: 4,\n  };\n\n  function initializeSettings() {\n    if (window.innerWidth >= 1280) {\n      const buttons = document.querySelector('.slider__buttons');\n\n      if (buttons) {\n        buttons.remove();\n      }\n      slider.removeAttribute('style');\n      sliderList.removeAttribute('style');\n    } else if (window.innerWidth >= 768 && window.innerWidth <= 1280) {\n      settings.itemWidth = 340;\n      settings.frameSize = 2;\n      settings.step = 2;\n      settings.gap = 20;\n      settings.previewWidth = 14;\n\n      slider.style.minWidth = `${\n        settings.itemWidth * settings.frameSize\n        + settings.gap\n        + settings.previewWidth\n      }px`;\n\n      const buttons = updateButtons();\n\n      handleButtonsClick(buttons);\n      slider.addEventListener('touchstart', touchStart);\n      slider.addEventListener('touchmove', touchMove);\n      slider.addEventListener('touchend', touchEnd);\n\n      sliderList.style.transform = 'translateX(0)';\n    } else {\n      settings.itemWidth = 280;\n      settings.frameSize = 1;\n      settings.step = 1;\n      settings.gap = 16;\n      settings.previewWidth = 4;\n\n      slider.style.minWidth = `${\n        settings.itemWidth * settings.frameSize\n        + settings.gap\n        + settings.previewWidth\n      }px`;\n\n      const buttons = updateButtons();\n\n      handleButtonsClick(buttons);\n      slider.addEventListener('touchstart', touchStart);\n      slider.addEventListener('touchmove', touchMove);\n      slider.addEventListener('touchend', touchEnd);\n\n      sliderList.style.transform = 'translateX(0)';\n    }\n  }\n\n  function updateButtons() {\n    const buttonsСontainer = document.createElement('ul');\n\n    buttonsСontainer.classList.add('slider__buttons');\n\n    const existingButtons = document.querySelector('.slider__buttons');\n\n    if (existingButtons) {\n      existingButtons.remove();\n    }\n\n    slider.append(buttonsСontainer);\n\n    const totalSlides = slides.length;\n    const frameSize = settings.frameSize;\n    const step = settings.step;\n\n    const numButtons = Math.ceil((totalSlides - frameSize) / step) + 1;\n\n    for (let i = 0; i < numButtons; i++) {\n      const item = document.createElement('li');\n      const button = document.createElement('button');\n\n      item.classList.add('slider__buttons-item');\n      button.classList.add('slider__buttons-btn');\n\n      item.appendChild(button);\n      buttonsСontainer.appendChild(item);\n    }\n\n    return buttonsСontainer.querySelectorAll('.slider__buttons-btn');\n  }\n\n  function handleButtonsClick(currentButtons) {\n    currentButtons.forEach((button, index) => {\n      button.addEventListener('click', () => {\n        if (index > currentIndex) {\n          currentIndex = index * settings.step;\n        } else {\n          currentIndex = index * settings.step;\n        }\n\n        currentButtons.forEach((btn) =>\n          btn.classList.remove('slider__buttons-btn--active'));\n        button.classList.add('slider__buttons-btn--active');\n\n        const sliderWidth = slider.offsetWidth;\n        const totalWidth\n          = slides.length * (settings.itemWidth + settings.gap) - settings.gap;\n\n        let offset;\n\n        if (currentIndex === 0) {\n          offset = 0;\n        } else if (currentIndex >= slides.length - settings.frameSize) {\n          offset = totalWidth - sliderWidth;\n        } else {\n          offset\n            = currentIndex * (settings.itemWidth + settings.gap)\n            - (sliderWidth - settings.itemWidth) / 2\n            + settings.previewWidth / 2;\n        }\n\n        sliderList.style.transform = `translateX(-${offset}px)`;\n      });\n    });\n\n    currentButtons[0].classList.add('slider__buttons-btn--active');\n  }\n\n  function touchStart(event) {\n    isDragging = true;\n    startPos = event.touches[0].clientX;\n    prevTranslate = currentTranslate;\n  }\n\n  function touchMove(event) {\n    if (isDragging) {\n      const currentPosition = event.touches[0].clientX;\n\n      currentTranslate = prevTranslate + currentPosition - startPos;\n      sliderList.style.transform = `translateX(${currentTranslate}px)`;\n    }\n  }\n\n  function touchEnd(e) {\n    isDragging = false;\n\n    const movedBy = startPos - e.changedTouches[0].clientX;\n\n    if (Math.abs(movedBy) > 50) {\n      if (movedBy > 50 && currentIndex < slides.length - settings.frameSize) {\n        currentIndex += settings.step;\n      } else if (movedBy < -50 && currentIndex > 0) {\n        currentIndex -= settings.step;\n      }\n    }\n\n    // Використання вашої логіки перемикання\n    const buttons = document.querySelectorAll('.slider__buttons-btn');\n\n    buttons[currentIndex / settings.step].click();\n  }\n\n  initializeSettings();\n  window.addEventListener('resize', initializeSettings);\n});\n"],"names":["document","addEventListener","initializeSettings","window","innerWidth","buttons","querySelector","remove","slider","removeAttribute","sliderList","settings","itemWidth","frameSize","step","gap","previewWidth","style","minWidth","concat","handleButtonsClick","updateButtons","touchStart","touchMove","touchEnd","transform","buttonsСontainer","createElement","classList","add","existingButtons","append","numButtons","Math","ceil","totalSlides","slides","length","i","item","button","appendChild","querySelectorAll","currentButtons","forEach","index","currentIndex","btn","offset","sliderWidth","offsetWidth","totalWidth","event","isDragging","startPos","touches","clientX","prevTranslate","currentTranslate","currentPosition","e","movedBy","changedTouches","abs","click"],"version":3,"file":"index.43f0623c.js.map"}